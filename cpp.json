{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Basic" :{
		"prefix": "T basic",
		"body" : [
			"// Super-Code! AWA",
			"// #include <bits/stdc++.h>",
			"#include <iostream>",
			"using namespace std;",
			"#define SPEEDUP                  \\",
			"    ios::sync_with_stdio(false); \\",
			"    cin.tie(nullptr);            \\",
			"    cout.tie(nullptr);",
			"typedef long long ll;",
			"const int N = 2e5 + 10;",
			"// #define int long long",
			" ",
			"void solve()",
			"{",
			"}",
			" ",
			"// signed main()",
			"int main()",
			"{",
			" ",
			"    int t;",
			"    cin >> t;",
			" ",
			"    while (t--) solve();",
			" ",
			"    return 0;",
			"}",
			]
	},
	"All Iterator" :{
		"prefix": "all()",
		"body": "${1:vec}.begin(),${1:vec}.end()",
		"description": "begin - end"
	},
	"Quick Power" :{
		"prefix": "T power",
		"body" : [
			"int qpower(int a, int b, int p = 1000000007)",
			"{",
			"    int ans = 1 % p;",
			"    while (b)",
			"    {",
			"        if(b & 1) ans = (long long) ans * a % p;",
			"        a = (long long) a * a % p;",
			"        b >>= 1;",
			"    }",
			"    return ans;",
			"}",
			]
	}
}